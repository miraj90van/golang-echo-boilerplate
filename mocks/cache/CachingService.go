// Code generated by mockery v2.23.0. DO NOT EDIT.

package mock_cache

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// CachingService is an autogenerated mock type for the CachingService type
type CachingService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, key, data, expiration
func (_m *CachingService) Create(ctx context.Context, key string, data interface{}, expiration time.Duration) (bool, error) {
	ret := _m.Called(ctx, key, data, expiration)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) (bool, error)); ok {
		return rf(ctx, key, data, expiration)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, time.Duration) bool); ok {
		r0 = rf(ctx, key, data, expiration)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, time.Duration) error); ok {
		r1 = rf(ctx, key, data, expiration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, key
func (_m *CachingService) Delete(ctx context.Context, key string) (bool, error) {
	ret := _m.Called(ctx, key)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, key, data
func (_m *CachingService) Get(ctx context.Context, key string, data interface{}) (interface{}, error) {
	ret := _m.Called(ctx, key, data)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (interface{}, error)); ok {
		return rf(ctx, key, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) interface{}); ok {
		r0 = rf(ctx, key, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, key, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCachingService interface {
	mock.TestingT
	Cleanup(func())
}

// NewCachingService creates a new instance of CachingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCachingService(t mockConstructorTestingTNewCachingService) *CachingService {
	mock := &CachingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
